{"version":3,"sources":["components/movie-card/MovieCard.component.jsx","redux/actions/getMovies.js","redux/actions/getGenres.js","components/movies-list/MoviesList.component.jsx","components/movie-details/MovieDetails.component.jsx","components/loader/Loader.component.jsx","redux/actions/filterActions.js","components/genres-list/GenresItem.component.jsx","components/genres-list/GenresList.component.jsx","components/rating/Rating.component.jsx","components/rating/Rating.filter.component.jsx","components/filters/Filters.component.jsx","App.js","redux/reducers/moviesReducer.js","redux/reducers/genresReducer.js","redux/reducers/filtersReducer.js","redux/reducers/rootReducer.js","index.js"],"names":["MovieCard","movie","genreName","className","to","id","src","poster_path","alt","title","vote_average","path","getData","url","a","fetch","response","json","data","results","genres","connect","state","movies","list","filters","dispatch","getMovies","type","then","payload","catch","err","console","log","getGenres","filteredGenres","minRating","useEffect","moviesList","length","filter","every","genre_ids","includes","map","key","ids","find","genre","name","sort","ownProps","parseInt","match","params","overview","release_date","backdrop_path","original_title","Loader","changeGenres","changeRating","GenresItem","checked","handleChange","defaultChecked","value","onChange","htmlFor","genreSelected","target","genreId","index","indexOf","push","splice","idx","Rating","ratings","i","rating","e","Filters","toggleClass","toggleShowClass","showClass","isLoading","Fragment","exact","onClick","component","MovieDetails","initState","genresFilter","rootReducer","combineReducers","action","b","popularity","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db9bbe62.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./movies.styles.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const MovieCard = ({ movie, genreName }) => {\r\n  return (\r\n    <div className=\"movie-card\">\r\n      <Link to={\"/movie-listings/\" + movie.id}>\r\n        <img\r\n          src={\"https://image.tmdb.org/t/p/w500/\" + movie.poster_path}\r\n          alt=\"poster\"\r\n        />\r\n        <h3 className=\"movie-card-title\">\r\n          {movie.title}\r\n          <span className=\"movie-card-genre\">{genreName + \" \"}</span>\r\n          <span className=\"movie-card-rating\">\r\n            <sub className=\"far fa-star\"></sub>\r\n            {\" \" + movie.vote_average}\r\n            <sub>/10</sub>\r\n          </span>\r\n        </h3>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n","const key = \"701f846dbfc08d1bb1e9875a4c25096c\";\r\nconst path = `https://api.themoviedb.org/3/movie/now_playing?api_key=${key}`;\r\n\r\nconst getData = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  return data.results;\r\n};\r\n\r\n/* \r\nfetching data from tMDB`s 'now-showing' movies API\r\ndispatching the action type and action payload to be passed to the moviesReducer\r\n*/\r\nexport const getMovies = () => {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"GET_MOVIES_START\" });\r\n\r\n    return getData(path)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_MOVIES_SUCCESS\",\r\n          payload: response,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"error fetching data\", err);\r\n        dispatch({\r\n          type: \"GET_MOVIES_ERROR\",\r\n        });\r\n      });\r\n  };\r\n};\r\n","const key = \"701f846dbfc08d1bb1e9875a4c25096c\";\r\nconst path = `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}`;\r\n\r\nconst getData = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  return data.genres;\r\n};\r\n\r\n/* \r\nfetching the genre list from tMDB`s genres API\r\ndispatching the action type and action payload to be passed to the genresReducer\r\n*/\r\nexport const getGenres = () => {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"GET_GENRES_START\" });\r\n    return getData(path)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_GENRES_SUCCESS\",\r\n          payload: response,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"error fetching data\", err);\r\n        dispatch({\r\n          type: \"GET_GENRES_ERROR\",\r\n        });\r\n      });\r\n  };\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { MovieCard } from \"../movie-card/MovieCard.component\";\r\nimport { getMovies } from \"redux/actions/getMovies\";\r\nimport { getGenres } from \"redux/actions/getGenres\";\r\n\r\nconst MoviesList = ({\r\n  movies,\r\n  genres,\r\n  filters: { filteredGenres = [], minRating } = {},\r\n  getMovies,\r\n  getGenres,\r\n}) => {\r\n  useEffect(() => {\r\n    getMovies();\r\n    getGenres();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setGenreName = (ids) => {\r\n    if (genres.length) {\r\n      let genreNames = ids.map(\r\n        (id) => genres.find((genre) => genre.id === id).name\r\n      );\r\n      return genreNames.sort();\r\n    }\r\n    return [];\r\n  };\r\n\r\n  let moviesList = [];\r\n  if (filteredGenres.length) {\r\n    moviesList = movies.filter((movie) =>\r\n      movie.vote_average >= minRating\r\n        ? filteredGenres.every((filter) => movie.genre_ids.includes(filter))\r\n        : null\r\n    );\r\n  } else {\r\n    moviesList = movies.filter((movie) => movie.vote_average >= minRating);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!!moviesList.length &&\r\n        moviesList.map((movie) => (\r\n          <MovieCard\r\n            key={movie.id}\r\n            movie={movie}\r\n            genreName={setGenreName(movie.genre_ids)}\r\n          />\r\n        ))}\r\n      {!moviesList.length && (\r\n        <h1 className=\"movie-container-title\">\r\n          No movies to show based on the selected criteria(s)\r\n        </h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { movies: { data } = {}, genres: { list } = {}, filters } = state;\r\n  return { movies: data, genres: list, filters };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMovies: () => dispatch(getMovies()),\r\n    getGenres: () => dispatch(getGenres()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviesList);\r\n","import React from \"react\";\r\nimport \"./movie-details.styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MovieDetails = ({\r\n  movie,\r\n  movie: {\r\n    overview,\r\n    release_date,\r\n    genreName,\r\n    backdrop_path,\r\n    genre_ids,\r\n    original_title,\r\n    vote_average,\r\n  } = {},\r\n  genres = [],\r\n}) => {\r\n  const setGenreName = (ids) => {\r\n    if (genres.length) {\r\n      let genreNames = ids.map(\r\n        (id) => genres.find((genre) => genre.id === id).name\r\n      );\r\n      return genreNames.sort();\r\n    }\r\n    return [];\r\n  };\r\n\r\n  if (movie) {\r\n    // setting the genre name for each movie, based on its id(s)\r\n    genreName = setGenreName(genre_ids);\r\n    return (\r\n      <div className=\"movie-details\">\r\n        <img\r\n          className=\"movie-details-poster\"\r\n          src={\"https://image.tmdb.org/t/p/w500/\" + backdrop_path}\r\n          alt=\"poster\"\r\n        />\r\n        <div className=\"movie-details-content\">\r\n          <h2>{original_title}</h2>\r\n          <h4>\r\n            Average rating : {vote_average}\r\n            <span>/10</span>\r\n          </h4>\r\n          <p>Genre: {genreName + \" \"} </p>\r\n          <p>Release date: {release_date}</p>\r\n          <p>{overview}</p>\r\n          <Link to=\"/movie-listings\">\r\n            <i className=\"fas fa-arrow-left\"></i>Back to movie listings\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>No details to show</p>;\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let id = parseInt(ownProps.match.params.id);\r\n  const { genres: { list } = {}, movies = {} } = state;\r\n  const movie = movies.data.find((movie) => movie.id === id);\r\n\r\n  return { movie, genres: list };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MovieDetails);\r\n","import React from \"react\";\r\nimport \"./loader.styles.scss\";\r\n\r\nexport const Loader = () => (\r\n  <div className=\"loader\">\r\n    <span className=\"fa fa-spinner fa-spin\" />\r\n  </div>\r\n);\r\n","/*\r\n * the filters ( genres filter and minimum rating filter) modified by the users are passed as a parameters to the two actions below\r\n * this selection is then passed to the filter reducer\r\n */\r\nexport const changeGenres = (filteredGenres) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"FILTERED_GENRES\",\r\n      payload: filteredGenres,\r\n    });\r\n  };\r\n};\r\n\r\nexport const changeRating = (minRating) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"FILTERED_RATING\",\r\n      payload: minRating,\r\n    });\r\n  };\r\n};\r\n\r\n/*  \r\nthe toggleClass action toggles the 'show' class on the filter-container element, to show/hide it on mobile devices\r\n */\r\nexport const toggleClass = (toggleShowClass) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"TOGGLE_CLASS\",\r\n      payload: toggleShowClass,\r\n    });\r\n  };\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GenresItem = ({ checked, name, id, handleChange }) => {\r\n  return (\r\n    <span className=\"genre-element\">\r\n      <input\r\n        defaultChecked={checked}\r\n        type=\"checkbox\"\r\n        id={id}\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor={id}>{name}</label>\r\n    </span>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./genres-list.styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { changeGenres } from \"../../redux/actions/filterActions\";\r\nimport { GenresItem } from \"./GenresItem.component\";\r\n\r\nexport const GenresList = ({\r\n  changeGenres,\r\n  genres,\r\n  filters: { filteredGenres = [] } = {},\r\n}) => {\r\n  const genreSelected = ({ target: { checked, id } }) => {\r\n    const genreId = parseInt(id);\r\n    const index = filteredGenres.indexOf(genreId);\r\n    checked ? filteredGenres.push(genreId) : filteredGenres.splice(index, 1);\r\n\r\n    return changeGenres(filteredGenres);\r\n  };\r\n\r\n  return (\r\n    <div className=\"genres\">\r\n      <h2>Genre</h2>\r\n      {genres.sort().map((genre, idx) => (\r\n        <GenresItem\r\n          key={`${genre.id}_${idx}`}\r\n          id={genre.id}\r\n          name={genre.name}\r\n          handleChange={genreSelected}\r\n          checked={filteredGenres.includes(genre.id)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { genres: { list } = {}, filters } = state;\r\n  return { genres: list, filters };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeGenres: (filteredGenres) => dispatch(changeGenres(filteredGenres)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GenresList);\r\n","import React from \"react\";\r\nimport \"./rating.styles.scss\";\r\n\r\nexport const Rating = () => {\r\n  const ratings = [];\r\n  let i = 0;\r\n  for (i; i <= 10; i += 0.5) {\r\n    ratings.push(i);\r\n  }\r\n  const votes = ratings.map(rating => (\r\n    <option key={rating} value={rating}>\r\n      {rating}\r\n    </option>\r\n  ));\r\n  return votes;\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { changeRating } from \"redux/actions/filterActions\";\r\nimport { Rating } from \"./Rating.component\";\r\n\r\nconst RatingFilter = ({ minRating, changeRating }) => {\r\n  const ratingSelected = (e) => {\r\n    changeRating(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>Minimum rating</h2>\r\n      <select value={minRating} onChange={ratingSelected} className=\"rating\">\r\n        <Rating />\r\n      </select>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { filters: { minRating } = {} } = state;\r\n  return { minRating };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeRating: (minRating) => dispatch(changeRating(minRating)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RatingFilter);\r\n","import React from \"react\";\r\nimport GenresList from \"../genres-list/GenresList.component\";\r\nimport RatingFilter from \"../rating/Rating.filter.component\";\r\n\r\nexport const Filters = ({ toggleClass }) => {\r\n  return (\r\n    <div className={`filter-container ${toggleClass ? \"show \" : \"\"}`}>\r\n      <h2>Filter by:</h2>\r\n      <GenresList />\r\n      <RatingFilter />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport MoviesList from \"./components/movies-list/MoviesList.component\";\r\nimport MovieDetails from \"./components/movie-details/MovieDetails.component\";\r\nimport { Loader } from \"./components/loader/Loader.component\";\r\nimport { Filters } from \"./components/filters/Filters.component\";\r\n\r\nimport {\r\n  changeGenres,\r\n  changeRating,\r\n  toggleClass,\r\n} from \"redux/actions/filterActions\";\r\n\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst App = ({\r\n  toggleShowClass,\r\n  movies: { isLoading } = {},\r\n  filters: { toggleClass } = {},\r\n}) => {\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <Route exact path=\"/movie-listings\">\r\n        <button\r\n          onClick={() => toggleShowClass(!toggleClass)}\r\n          className=\"filter-btn\"\r\n        >\r\n          Filter movies<i className=\"fas fa-filter\"></i>\r\n        </button>\r\n        <Filters toggleClass={toggleClass} />\r\n        <div className=\"movie-container\">\r\n          <h1 className=\"page-title\">Movie listings</h1>\r\n          <div className=\"movie\">\r\n            <MoviesList />\r\n          </div>\r\n        </div>\r\n      </Route>\r\n      <Route exact path=\"/movie-listings/:id\" component={MovieDetails} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { movies, filters } = state;\r\n  return { movies, filters };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeGenres: (filteredGenres) => dispatch(changeGenres(filteredGenres)),\r\n    changeRating: (minRating) => dispatch(changeRating(minRating)),\r\n    toggleShowClass: (showClass) => dispatch(toggleClass(showClass)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","const initState = {\r\n  data: [],\r\n  isLoading: true,\r\n};\r\n\r\n/*\r\n * the data is fetched from the getMovies action\r\n * based on the action type received, we update the state, including the isLoading flag, to remove the spinner\r\n * the movies list data, sorted by the movies popularity, will be passed to the root reducer\r\n * from the root reducer, the data is passed to the store and into the App.js props\r\n */\r\n\r\nexport const moviesReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_MOVIES_START\":\r\n      return state;\r\n    case \"GET_MOVIES_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        data: action.payload.sort((a, b) => b.popularity - a.popularity),\r\n        isLoading: false,\r\n      };\r\n    case \"GET_MOVIES_ERROR\":\r\n      return { ...state, isLoading: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initState = {\r\n  list: [],\r\n  isLoading: true,\r\n  genresFilter: [],\r\n};\r\n\r\n/*\r\n * the data is fetched from the getGenres action\r\n * similary to the movies list data, the genres list will be passed to the root reducer and to the store, into App.js as props\r\n * the isLoading flag is set to false, so the spinner element from the Loader component will not be shown anymore\r\n */\r\nexport const genresReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_GENRES_START\":\r\n      return state;\r\n    case \"GET_GENRES_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n        isLoading: false,\r\n      };\r\n    case \"GET_GENRES_ERROR\":\r\n      return { ...state, isLoading: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initState = {\r\n  filteredGenres: [],\r\n  minRating: 3,\r\n  toggleClass: false,\r\n};\r\n\r\n/*\r\n * the filters modified by the users are passed here from the actions payload, along with the toggleClass flag, which will show/hide the filter-container on mobile devices\r\n * the data is then passed to the root reducer and then to the store, into App js as props\r\n */\r\nexport const filtersReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"FILTERED_GENRES\":\r\n      return {\r\n        ...state,\r\n        filteredGenres: action.payload,\r\n      };\r\n    case \"FILTERED_RATING\":\r\n      return {\r\n        ...state,\r\n        minRating: action.payload,\r\n      };\r\n    case \"TOGGLE_CLASS\":\r\n      return {\r\n        ...state,\r\n        toggleClass: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { moviesReducer } from \"./moviesReducer\";\r\nimport { genresReducer } from \"./genresReducer\";\r\nimport { filtersReducer } from \"./filtersReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  movies: moviesReducer,\r\n  genres: genresReducer,\r\n  filters: filtersReducer,\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"./redux/reducers/rootReducer\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}
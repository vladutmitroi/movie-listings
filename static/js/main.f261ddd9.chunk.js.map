{"version":3,"sources":["components/movie-card/movie-card.component.jsx","components/movies-list/movies-list.component.jsx","components/genres-list/genres-list.component.jsx","components/movie-details/movie-details.component.jsx","components/rating/rating.component.jsx","components/loader/loader.component.jsx","redux/actions/getMovies.js","redux/actions/getGenres.js","App.js","redux/actions/filterActions.js","redux/reducers/moviesReducer.js","redux/reducers/genresReducer.js","redux/reducers/filtersReducer.js","redux/reducers/rootReducer.js","index.js"],"names":["MovieCard","movie","genreName","className","to","id","src","poster_path","alt","title","vote_average","MoviesList","movies","genres","filteredGenres","minRating","console","log","moviesList","length","filter","every","genre_ids","includes","map","key","ids","find","genre","name","sort","GenresList","checked","handleChange","defaultChecked","type","value","onChange","htmlFor","connect","state","ownProps","parseInt","match","params","data","props","list","backdrop_path","original_title","release_date","overview","Rating","ratings","i","push","rating","Loader","getData","url","a","fetch","response","json","results","moviesURL","genreURL","App","genreSelected","e","filters","genreId","target","index","indexOf","splice","changeGenres","ratingSelected","changeRating","toggleFilterClass","currentState","toggleClass","this","getMovies","getGenres","isLoading","Fragment","exact","path","onClick","component","MovieDetails","React","Component","dispatch","then","payload","catch","err","showClass","toggleShowClass","initState","genresFilter","rootReducer","combineReducers","action","b","popularity","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"kYAIaA,EAAY,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACjC,OACE,yBAAKC,UAAU,cACb,kBAAC,IAAD,CAAMC,GAAI,WAAaH,EAAMI,IAC3B,yBACEC,IAAK,mCAAqCL,EAAMM,YAChDC,IAAI,WAEN,wBAAIL,UAAU,oBACXF,EAAMQ,MACP,0BAAMN,UAAU,oBAAoBD,EAAY,KAChD,0BAAMC,UAAU,qBACd,yBAAKA,UAAU,gBACd,IAAMF,EAAMS,aACb,yCCfCC,EAAa,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,UAgB3DC,QAAQC,IAAIH,GAEZ,IAAII,EAAa,GAWjB,OATEA,EADEJ,EAAeK,OACJP,EAAOQ,QAAO,SAACnB,GAAD,OACzBA,EAAMS,cAAgBK,EAClBD,EAAeO,OAAM,SAACD,GAAD,OAAYnB,EAAMqB,UAAUC,SAASH,MAC1D,QAGOR,EAAOQ,QAAO,SAACnB,GAAD,OAAWA,EAAMS,cAAgBK,MAG5CI,OAChBD,EAAWM,KAAI,SAACvB,GAAD,OACb,kBAAC,EAAD,CACEwB,IAAKxB,EAAMI,GACXJ,MAAOA,EACPC,WAjCgBwB,EAiCQzB,EAAMqB,UAhC9BT,EAAOM,OACQO,EAAIF,KACnB,SAACnB,GAAD,OAAQQ,EAAOc,MAAK,SAACC,GAAD,OAAWA,EAAMvB,KAAOA,KAAIwB,QAEhCC,OAEb,MAPY,IAACJ,KAqCpB,wBAAIvB,UAAU,yBAAd,wDCtCS4B,G,MAAa,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAASH,EAA6B,EAA7BA,KAAMxB,EAAuB,EAAvBA,GAAI4B,EAAmB,EAAnBA,aAC9C,OACE,0BAAM9B,UAAU,iBACd,2BACE+B,eAAgBF,EAChBG,KAAK,WACL9B,GAAIA,EACJ+B,MAAOP,EACPQ,SAAUJ,IAEZ,2BAAOK,QAASjC,GAAKwB,M,gBC+CZU,eAXS,SAACC,EAAOC,GAC9B,IAAIpC,EAAKqC,SAASD,EAASE,MAAMC,OAAOvC,IAChCQ,EAAW2B,EAAX3B,OAMR,MAAO,CAAEZ,MAJKuC,EAAM5B,OAAOiC,KAAKzB,QAAO,SAACnB,GACtC,OAAOA,EAAMI,KAAOA,KAGNQ,YAGH0B,EAvDM,SAACO,GACpB,IAGsBpB,EAHhBzB,EAAQ6C,EAAM7C,MAAM,GACpBY,EAASiC,EAAMjC,OAAOkC,KAY5B,OAAI9C,GAEFA,EAAMC,WAZcwB,EAYWzB,EAAMqB,UAXjCT,EAAOM,OACQO,EAAIF,KACnB,SAACnB,GAAD,OAAQQ,EAAOc,MAAK,SAACC,GAAD,OAAWA,EAAMvB,KAAOA,KAAIwB,QAEhCC,OAEb,IAOL,yBAAK3B,UAAU,iBACb,yBACEA,UAAU,uBACVG,IAAK,mCAAqCL,EAAM+C,cAChDxC,IAAI,WAEN,yBAAKL,UAAU,yBACb,4BAAKF,EAAMgD,gBACX,gDACoBhD,EAAMS,aACxB,sCAEF,qCAAWT,EAAMC,UAAY,IAA7B,KACA,4CAAkBD,EAAMiD,cACxB,2BAAIjD,EAAMkD,UACV,kBAAC,IAAD,CAAM/C,GAAG,WACP,uBAAGD,UAAU,sBADf,6BAOC,oDC1CEiD,G,MAAS,WAGpB,IAFA,IAAMC,EAAU,GACZC,EAAI,EACAA,GAAK,GAAIA,GAAK,GACpBD,EAAQE,KAAKD,GAOf,OALcD,EAAQ7B,KAAI,SAAAgC,GAAM,OAC9B,4BAAQ/B,IAAK+B,EAAQpB,MAAOoB,GACzBA,QCRMC,G,MAAS,kBACpB,yBAAKtD,UAAU,UACb,0BAAMA,UAAU,6B,yBCLduD,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACSC,MAAMF,GADf,cACRG,EADQ,gBAEKA,EAASC,OAFd,cAERlB,EAFQ,yBAGPA,EAAKmB,SAHE,2CAAH,sDCAPN,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACSC,MAAMF,GADf,cACRG,EADQ,gBAEKA,EAASC,OAFd,cAERlB,EAFQ,yBAGPA,EAAKhC,QAHE,2CAAH,sD,OCoBPY,EAAM,mCACNwC,EAAS,iEAA6DxC,GACtEyC,EAAQ,gEAA4DzC,GAEpE0C,E,2MAMJC,cAAgB,SAACC,GAAM,IAEfvD,EAAmB,EAAKgC,MAAMwB,QAA9BxD,eACFyD,EAAU7B,SAAS2B,EAAEG,OAAOnE,IAC5BoE,EAAQ3D,EAAe4D,QAAQH,GAInC,OAHAF,EAAEG,OAAOxC,QACLlB,EAAeyC,KAAKgB,GACpBzD,EAAe6D,OAAOF,EAAO,GAC1B,EAAK3B,MAAM8B,aAAa9D,I,EAGjC+D,eAAiB,SAACR,GAEhB,EAAKvB,MAAMgC,aAAaT,EAAEG,OAAOpC,Q,EAGnC2C,kBAAoB,WAElB,IAAMC,EAAe,EAAKlC,MAAMwB,QAAQW,YACxC,EAAKnC,MAAMmC,aAAaD,I,mFAvBxBE,KAAKpC,MAAMqC,UAAUlB,GACrBiB,KAAKpC,MAAMsC,UAAUlB,K,+BAyBb,IAAD,SACqBgB,KAAKpC,MAAMlC,OAA/BiC,EADD,EACCA,KAAMwC,EADP,EACOA,UACNtC,EAASmC,KAAKpC,MAAMjC,OAApBkC,KAFD,EAG4CmC,KAAKpC,MAAMwB,QAAtDxD,EAHD,EAGCA,eAAgBC,EAHjB,EAGiBA,UAAWkE,EAH5B,EAG4BA,YAEnC,OACE,kBAAC,IAAMK,SAAP,KACGD,GAAa,kBAAC,EAAD,MACd,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,WAChB,4BAAQC,QAASP,KAAKH,kBAAmB5E,UAAU,cAAnD,gBACe,uBAAGA,UAAU,mBAE5B,yBACEA,UACE8E,EAAc,yBAA2B,oBAG3C,0CACA,yBAAK9E,UAAU,UACb,qCACC4C,EAAKjB,OAAON,KAAI,SAACI,GAAD,OACf,kBAAC,EAAD,CACEH,IAAKG,EAAMvB,GACXA,GAAIuB,EAAMvB,GACVwB,KAAMD,EAAMC,KACZI,aAAc,EAAKmC,cACnBpC,UAASlB,EAAeS,SAASK,EAAMvB,UAI7C,8CACA,4BACE+B,MAAOrB,EACPsB,SAAU6C,KAAKL,eACf1E,UAAU,UAEV,kBAAC,EAAD,QAIJ,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,cAAd,kBACA,yBAAKA,UAAU,SACb,kBAAC,EAAD,CACES,OAAQiC,EACRhC,OAAQkC,EACRjC,eAAgBA,EAChBC,UAAWA,OAKnB,kBAAC,IAAD,CAAOwE,OAAK,EAACC,KAAK,cAAcE,UAAWC,S,GAhFjCC,IAAMC,WAqGTtD,eAfS,SAACC,GAEvB,MAAO,CAAE5B,OAD2B4B,EAA5B5B,OACSC,OADmB2B,EAApB3B,OACSyD,QADW9B,EAAZ8B,YAIC,SAACwB,GAC1B,MAAO,CACLX,UAAW,kBAAMW,GF3GKN,EE2GcvB,EF1G/B,SAAC6B,GAEN,OADAA,EAAS,CAAE3D,KAAM,qBACVuB,EAAQ8B,GACZO,MAAK,SAACjC,GACLgC,EAAS,CACP3D,KAAM,qBACN6D,QAASlC,OAGZmC,OAAM,SAACC,GACNlF,QAAQC,IAAI,sBAAuBiF,GACnCJ,EAAS,CACP3D,KAAM,2BAbS,IAACqD,GE4GtBJ,UAAW,kBAAMU,GD5GKN,EC4GctB,ED3G/B,SAAC4B,GAEN,OADAA,EAAS,CAAE3D,KAAM,qBACVuB,EAAQ8B,GACZO,MAAK,SAACjC,GACLgC,EAAS,CACP3D,KAAM,qBACN6D,QAASlC,OAGZmC,OAAM,SAACC,GACNlF,QAAQC,IAAI,sBAAuBiF,GACnCJ,EAAS,CACP3D,KAAM,2BAbS,IAACqD,GC6GtBZ,aAAc,SAAC9D,GAAD,OAAoBgF,ECnHV,SAAChF,GAC3B,OAAO,SAACgF,GACNA,EAAS,CACP3D,KAAM,kBACN6D,QAASlF,KD+GgC8D,CAAa9D,KACxDgE,aAAc,SAAC/D,GAAD,OAAe+E,EC3GL,SAAC/E,GAC3B,OAAO,SAAC+E,GACNA,EAAS,CACP3D,KAAM,kBACN6D,QAASjF,KDuG2B+D,CAAa/D,KACnDkE,YAAa,SAACkB,GAAD,OAAeL,GChGJM,EDgGyBD,EC/F5C,SAACL,GACNA,EAAS,CACP3D,KAAM,eACN6D,QAASI,OAJY,IAACA,MDoGb7D,CAA6C4B,G,sBE7HtDkC,EAAY,CAChBxD,KAAM,GACNwC,WAAW,GCFPgB,EAAY,CAChBtD,KAAM,GACNsC,WAAW,EACXiB,aAAc,ICHVD,EAAY,CAChBvF,eAAgB,GAChBC,UAAW,EACXkE,aAAa,GCEFsB,EAAcC,YAAgB,CACzC5F,OHM2B,WAAgC,IAA/B4B,EAA8B,uDAAtB6D,EAAWI,EAAW,uCAC1D,OAAQA,EAAOtE,MACb,IAAK,mBACH,OAAOK,EACT,IAAK,qBACH,OAAO,eACFA,EADL,CAEEK,KAAM4D,EAAOT,QAAQlE,MAAK,SAAC8B,EAAG8C,GAAJ,OAAUA,EAAEC,WAAa/C,EAAE+C,cACrDtB,WAAW,IAEf,IAAK,mBACH,OAAO,eAAK7C,EAAZ,CAAmB6C,WAAW,IAChC,QACE,OAAO7C,IGlBX3B,OFI2B,WAAgC,IAA/B2B,EAA8B,uDAAtB6D,EAAWI,EAAW,uCAC1D,OAAQA,EAAOtE,MACb,IAAK,mBACH,OAAOK,EACT,IAAK,qBACH,OAAO,eACFA,EADL,CAEEO,KAAM0D,EAAOT,QACbX,WAAW,IAEf,IAAK,mBACH,OAAO,eAAK7C,EAAZ,CAAmB6C,WAAW,IAChC,QACE,OAAO7C,IEhBX8B,QDE4B,WAAgC,IAA/B9B,EAA8B,uDAAtB6D,EAAWI,EAAW,uCAC3D,OAAQA,EAAOtE,MACb,IAAK,kBACH,OAAO,eACFK,EADL,CAEE1B,eAAgB2F,EAAOT,UAE3B,IAAK,kBACH,OAAO,eACFxD,EADL,CAEEzB,UAAW0F,EAAOT,UAEtB,IAAK,eACH,OAAO,eACFxD,EADL,CAEEyC,YAAawB,EAAOT,UAExB,QACE,OAAOxD,MEnBPoE,EAAQC,YAAYN,EAAaO,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.f261ddd9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./movies.styles.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const MovieCard = ({ movie, genreName }) => {\r\n  return (\r\n    <div className=\"movie-card\">\r\n      <Link to={\"/movies/\" + movie.id}>\r\n        <img\r\n          src={\"https://image.tmdb.org/t/p/w500/\" + movie.poster_path}\r\n          alt=\"poster\"\r\n        />\r\n        <h3 className=\"movie-card-title\">\r\n          {movie.title}\r\n          <span className=\"movie-card-genre\">{genreName + \" \"}</span>\r\n          <span className=\"movie-card-rating\">\r\n            <sub className=\"far fa-star\"></sub>\r\n            {\" \" + movie.vote_average}\r\n            <sub>/10</sub>\r\n          </span>\r\n        </h3>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { MovieCard } from \"../movie-card/movie-card.component\";\r\n\r\nexport const MoviesList = ({ movies, genres, filteredGenres, minRating }) => {\r\n  const setGenreName = (ids) => {\r\n    if (genres.length) {\r\n      let genreNames = ids.map(\r\n        (id) => genres.find((genre) => genre.id === id).name\r\n      );\r\n      return genreNames.sort();\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /*\r\n  * first checking the there are selected genres to filter the movies. \r\n  If there are, we filter the movies list and keep the movies that have the 1. vote_average property at least equal to the min. rating from the Rating filter and 2. the genre id(s) the same as the genres selected in the genre filter\r\n  If there are no selected genres, we filter the movies only by the vote_average property\r\n   */\r\n  console.log(filteredGenres);\r\n  // filteredGenres reset when BACK, but not the checked value\r\n  let moviesList = [];\r\n  if (filteredGenres.length) {\r\n    moviesList = movies.filter((movie) =>\r\n      movie.vote_average >= minRating\r\n        ? filteredGenres.every((filter) => movie.genre_ids.includes(filter))\r\n        : null\r\n    );\r\n  } else {\r\n    moviesList = movies.filter((movie) => movie.vote_average >= minRating);\r\n  }\r\n\r\n  return moviesList.length ? (\r\n    moviesList.map((movie) => (\r\n      <MovieCard\r\n        key={movie.id}\r\n        movie={movie}\r\n        genreName={setGenreName(movie.genre_ids)}\r\n      />\r\n    ))\r\n  ) : (\r\n    <h1 className=\"movie-container-title\">\r\n      No movies to show based on the selected criteria(s)\r\n    </h1>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./genres-list.styles.scss\";\r\n\r\nexport const GenresList = ({ checked, name, id, handleChange }) => {\r\n  return (\r\n    <span className=\"genre-element\">\r\n      <input\r\n        defaultChecked={checked}\r\n        type=\"checkbox\"\r\n        id={id}\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor={id}>{name}</label>\r\n    </span>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./movie-details.styles.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MovieDetails = (props) => {\r\n  const movie = props.movie[0];\r\n  const genres = props.genres.list;\r\n\r\n  const setGenreName = (ids) => {\r\n    if (genres.length) {\r\n      let genreNames = ids.map(\r\n        (id) => genres.find((genre) => genre.id === id).name\r\n      );\r\n      return genreNames.sort();\r\n    }\r\n    return [];\r\n  };\r\n\r\n  if (movie) {\r\n    // setting the genre name for each movie, based on its id(s)\r\n    movie.genreName = setGenreName(movie.genre_ids);\r\n    return (\r\n      <div className=\"movie-details\">\r\n        <img\r\n          className=\"movie-details-poster\"\r\n          src={\"https://image.tmdb.org/t/p/w500/\" + movie.backdrop_path}\r\n          alt=\"poster\"\r\n        />\r\n        <div className=\"movie-details-content\">\r\n          <h2>{movie.original_title}</h2>\r\n          <h4>\r\n            Average rating : {movie.vote_average}\r\n            <span>/10</span>\r\n          </h4>\r\n          <p>Genre: {movie.genreName + \" \"} </p>\r\n          <p>Release date: {movie.release_date}</p>\r\n          <p>{movie.overview}</p>\r\n          <Link to=\"/movies\">\r\n            <i className=\"fas fa-arrow-left\"></i>Back to movie listings\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p>No details to show</p>;\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let id = parseInt(ownProps.match.params.id);\r\n  const { genres } = state;\r\n  // passing to the movie prop only the selected movie, to show only its details\r\n  const movie = state.movies.data.filter((movie) => {\r\n    return movie.id === id;\r\n  });\r\n\r\n  return { movie, genres };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MovieDetails);\r\n","import React from \"react\";\r\nimport \"./rating.styles.scss\";\r\n\r\nexport const Rating = () => {\r\n  const ratings = [];\r\n  let i = 0;\r\n  for (i; i <= 10; i += 0.5) {\r\n    ratings.push(i);\r\n  }\r\n  const votes = ratings.map(rating => (\r\n    <option key={rating} value={rating}>\r\n      {rating}\r\n    </option>\r\n  ));\r\n  return votes;\r\n};\r\n","import React from \"react\";\r\nimport \"./loader.styles.scss\";\r\n\r\nexport const Loader = () => (\r\n  <div className=\"loader\">\r\n    <span className=\"fa fa-spinner fa-spin\" />\r\n  </div>\r\n);\r\n","const getData = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  return data.results;\r\n};\r\n\r\n/* \r\nfetching data from tMDB`s 'now-showing' movies API\r\ndispatching the action type and action payload to be passed to the moviesReducer\r\n*/\r\nexport const getMovies = (path) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"GET_MOVIES_START\" });\r\n    return getData(path)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_MOVIES_SUCCESS\",\r\n          payload: response,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"error fetching data\", err);\r\n        dispatch({\r\n          type: \"GET_MOVIES_ERROR\",\r\n        });\r\n      });\r\n  };\r\n};\r\n","const getData = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  return data.genres;\r\n};\r\n\r\n/* \r\nfetching the genre list from tMDB`s genres API\r\ndispatching the action type and action payload to be passed to the genresReducer\r\n*/\r\nexport const getGenres = (path) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"GET_GENRES_START\" });\r\n    return getData(path)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_GENRES_SUCCESS\",\r\n          payload: response,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"error fetching data\", err);\r\n        dispatch({\r\n          type: \"GET_GENRES_ERROR\",\r\n        });\r\n      });\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { MoviesList } from \"./components/movies-list/movies-list.component\";\r\nimport { GenresList } from \"./components/genres-list/genres-list.component\";\r\nimport MovieDetails from \"./components/movie-details/movie-details.component\";\r\nimport { Rating } from \"./components/rating/rating.component\";\r\nimport { Loader } from \"./components/loader/loader.component\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { getMovies } from \"./redux/actions/getMovies\";\r\nimport { getGenres } from \"./redux/actions/getGenres\";\r\nimport {\r\n  changeGenres,\r\n  changeRating,\r\n  toggleClass,\r\n} from \"./redux/actions/filterActions\";\r\n\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst key = \"701f846dbfc08d1bb1e9875a4c25096c\";\r\nconst moviesURL = `https://api.themoviedb.org/3/movie/now_playing?api_key=${key}`;\r\nconst genreURL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${key}`;\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.getMovies(moviesURL);\r\n    this.props.getGenres(genreURL);\r\n  }\r\n\r\n  genreSelected = (e) => {\r\n    /* updating the store with the selection of genre(s) to filter the movies with */\r\n    let { filteredGenres } = this.props.filters;\r\n    let genreId = parseInt(e.target.id);\r\n    let index = filteredGenres.indexOf(genreId);\r\n    e.target.checked\r\n      ? filteredGenres.push(genreId)\r\n      : filteredGenres.splice(index, 1);\r\n    return this.props.changeGenres(filteredGenres);\r\n  };\r\n\r\n  ratingSelected = (e) => {\r\n    /* Updating the store with the min. rating filter,based on the selection from <select> element */\r\n    this.props.changeRating(e.target.value);\r\n  };\r\n\r\n  toggleFilterClass = () => {\r\n    /* adding/removing the 'show' class added to the 'filter' component, used to hide the component on mobile devices */\r\n    const currentState = this.props.filters.toggleClass;\r\n    this.props.toggleClass(!currentState);\r\n  };\r\n\r\n  render() {\r\n    const { data, isLoading } = this.props.movies;\r\n    const { list } = this.props.genres;\r\n    const { filteredGenres, minRating, toggleClass } = this.props.filters;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {isLoading && <Loader />}\r\n        <Route exact path=\"/movies\">\r\n          <button onClick={this.toggleFilterClass} className=\"filter-btn\">\r\n            Filter movies<i className=\"fas fa-filter\"></i>\r\n          </button>\r\n          <div\r\n            className={\r\n              toggleClass ? \"filter-container show \" : \"filter-container\"\r\n            }\r\n          >\r\n            <h2>Filter by:</h2>\r\n            <div className=\"genres\">\r\n              <h2>Genre</h2>\r\n              {list.sort().map((genre) => (\r\n                <GenresList\r\n                  key={genre.id}\r\n                  id={genre.id}\r\n                  name={genre.name}\r\n                  handleChange={this.genreSelected}\r\n                  checked={filteredGenres.includes(genre.id) ? true : false}\r\n                />\r\n              ))}\r\n            </div>\r\n            <h2>Minimum rating</h2>\r\n            <select\r\n              value={minRating}\r\n              onChange={this.ratingSelected}\r\n              className=\"rating\"\r\n            >\r\n              <Rating />\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"movie-container\">\r\n            <h1 className=\"page-title\">Movie listings</h1>\r\n            <div className=\"movie\">\r\n              <MoviesList\r\n                movies={data}\r\n                genres={list}\r\n                filteredGenres={filteredGenres}\r\n                minRating={minRating}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Route>\r\n        <Route exact path=\"/movies/:id\" component={MovieDetails} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { movies, genres, filters } = state;\r\n  return { movies, genres, filters };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMovies: () => dispatch(getMovies(moviesURL)),\r\n    getGenres: () => dispatch(getGenres(genreURL)),\r\n    changeGenres: (filteredGenres) => dispatch(changeGenres(filteredGenres)),\r\n    changeRating: (minRating) => dispatch(changeRating(minRating)),\r\n    toggleClass: (showClass) => dispatch(toggleClass(showClass)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","/*\r\n * the filters ( genres filter and minimum rating filter) modified by the users are passed as a parameters to the two actions below\r\n * this selection is then passed to the filter reducer\r\n */\r\nexport const changeGenres = (filteredGenres) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"FILTERED_GENRES\",\r\n      payload: filteredGenres,\r\n    });\r\n  };\r\n};\r\n\r\nexport const changeRating = (minRating) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"FILTERED_RATING\",\r\n      payload: minRating,\r\n    });\r\n  };\r\n};\r\n\r\n/*  \r\nthe toggleClass action toggles the 'show' class on the filter-container element, to show/hide it on mobile devices\r\n */\r\nexport const toggleClass = (toggleShowClass) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: \"TOGGLE_CLASS\",\r\n      payload: toggleShowClass,\r\n    });\r\n  };\r\n};\r\n","const initState = {\r\n  data: [],\r\n  isLoading: true,\r\n};\r\n\r\n/*\r\n * the data is fetched from the getMovies action\r\n * based on the action type received, we update the state, including the isLoading flag, to remove the spinner\r\n * the movies list data, sorted by the movies popularity, will be passed to the root reducer\r\n * from the root reducer, the data is passed to the store and into the App.js props\r\n */\r\n\r\nexport const moviesReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_MOVIES_START\":\r\n      return state;\r\n    case \"GET_MOVIES_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        data: action.payload.sort((a, b) => b.popularity - a.popularity),\r\n        isLoading: false,\r\n      };\r\n    case \"GET_MOVIES_ERROR\":\r\n      return { ...state, isLoading: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initState = {\r\n  list: [],\r\n  isLoading: true,\r\n  genresFilter: [],\r\n};\r\n\r\n/*\r\n * the data is fetched from the getGenres action\r\n * similary to the movies list data, the genres list will be passed to the root reducer and to the store, into App.js as props\r\n * the isLoading flag is set to false, so the spinner element from the Loader component will not be shown anymore\r\n */\r\nexport const genresReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_GENRES_START\":\r\n      return state;\r\n    case \"GET_GENRES_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        list: action.payload,\r\n        isLoading: false,\r\n      };\r\n    case \"GET_GENRES_ERROR\":\r\n      return { ...state, isLoading: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initState = {\r\n  filteredGenres: [],\r\n  minRating: 3,\r\n  toggleClass: false,\r\n};\r\n\r\n/*\r\n * the filters modified by the users are passed here from the actions payload, along with the toggleClass flag, which will show/hide the filter-container on mobile devices\r\n * the data is then passed to the root reducer and then to the store, into App js as props\r\n */\r\nexport const filtersReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"FILTERED_GENRES\":\r\n      return {\r\n        ...state,\r\n        filteredGenres: action.payload,\r\n      };\r\n    case \"FILTERED_RATING\":\r\n      return {\r\n        ...state,\r\n        minRating: action.payload,\r\n      };\r\n    case \"TOGGLE_CLASS\":\r\n      return {\r\n        ...state,\r\n        toggleClass: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { moviesReducer } from \"./moviesReducer\";\r\nimport { genresReducer } from \"./genresReducer\";\r\nimport { filtersReducer } from \"./filtersReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  movies: moviesReducer,\r\n  genres: genresReducer,\r\n  filters: filtersReducer,\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"./redux/reducers/rootReducer\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}